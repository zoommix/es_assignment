#!/usr/bin/env ruby
# frozen_string_literal: true

require_relative '../config/boot'
require 'pg'
require 'elasticsearch'
require 'dotenv/load'

# rubocop:disable Metrics/MethodLength
def wait_for_postgres(max_attempts, delay)
  attempts = 0
  while attempts < max_attempts
    begin
      PG.connect(
        host:     ENV['POSTGRES_HOST'],
        port:     ENV['POSTGRES_PORT'],
        user:     ENV['POSTGRES_USER'],
        password: ENV['POSTGRES_PASSWORD'],
        dbname:   ENV['POSTGRES_DB']
      )
      puts 'PostgreSQL is available.'
      break
    rescue PG::ConnectionBad
      attempts += 1
      puts "Waiting for PostgreSQL (Attempt #{attempts}/#{max_attempts})..."
      sleep delay
    end
  end
end

def wait_for_elasticsearch(max_attempts, delay)
  attempts = 0
  client = Elasticsearch::Client.new(hosts: [ENV['ELASTICSEARCH_URL']])
  while attempts < max_attempts
    begin
      client.ping
      puts 'Elasticsearch is available.'
      break
    rescue Elasticsearch::Transport::Transport::Errors::ServiceUnavailable
      attempts += 1
      puts "Waiting for Elasticsearch (Attempt #{attempts}/#{max_attempts})..."
      sleep delay
    end
  end
end
# rubocop:enable Metrics/MethodLength

max_attempts = 100
delay = 5

# Wait for PostgreSQL to be available
wait_for_postgres(max_attempts, delay)

# Wait for Elasticsearch to be available
wait_for_elasticsearch(max_attempts, delay)
